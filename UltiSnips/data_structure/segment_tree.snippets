# sgt == segment tree
# 单点更新，区间查询
# 区间更新，单点查询
# 区间更新，区间查询

snippet sgt_point "线段树，单点更新" b
template<typename T,int N = maxn>
struct sgt_point {
    T tr[N*4+5];
    inline int lp(int p)        { return p<<1;     }
    inline int rp(int p)        { return (p<<1)|1; }
    inline int mid(int l,int r) { return (l+r)>>1; }

    inline void pushup(int p){
        tr[p] = tr[lp(p)] + tr[rp(p)];
    }

    void build(int l,int r,int p){
        if( l == r ) {
            scanf("%d",&tr[p]);
            return;
        }
        int m = mid(l,r);
        build(l,m,lp(p));
        build(m+1,r,rp(p));
        pushup(p);
    }

    void update(int pos,T v,int l,int r,int p){
        if( l == r ) {
            tr[p] += v;
            return;
        }
        int m = mid(l,r);
        if( pos<=m) 
            update(pos,v,l,m,lp(p));
        else 
            update(pos,v,m+1,r,rp(p));
        pushup(p);
    }

    T query(int L,int R,int l,int r,int p){
        if( L <=l && r<=R ) {
            return tr[p];
        }
        int m = mid(l,r);
        T ret = 0;
        if( L <= m ) ret+=query(L,R,l,m,lp(p));
        if( R >=m+1) ret+=query(L,R,m+1,r,rp(p));
        //pushup(p); 因为没有更改，所以不需要
        return ret;
    }
};
sgt_point<int> sgt;
endsnippet

snippet sgt_range "线段树，区间更新" b
//===================== 线段树 BEG
template<typename T=int,int N=maxn>
struct sgt_range {
    T tr[N*4+5];
    T flag[N*4+5]; //flag 里的内容与题目有关，灵活设定
    inline int lp(int p){return p<<1;}
    inline int rp(int p){return (p<<1)|1;}
    inline int mid(int l,int r){return (l+r)>>1;}

    inline void pushup(int p){  //向上合并
        tr[p] = tr[lp(p)] + tr[rp(p)];
    }
    inline void pushdown(int p,int m){ //向下压标记
        if( flag[p] ){ //当前点有flag
            //flag[lp(p)] += flag[p]; //标记,传给左孩子
            //flag[rp(p)] += flag[p]; //标记,传给右孩子
            //tr[lp(p)] += flag[p]*(m-(m>>1)); //
            //tr[rp(p)] += flag[p]*(m>>1);
            //flag[p] = 0;
        }
    }

    void build(int l,int r,int p){ //建立
        if( l == r ) {
            scanf("%lld",&tr[p]);
            return;
        }
        int m = mid(l,r);
        build(l,m,lp(p));
        build(m+1,r,rp(p));
        pushup(p);
    }

    // 区间更新
    void update(int L,int R,T v,int l,int r,int p){ 
        if(L <= l && r <= R) { //给一个新的标记
            //flag[p] += v;  
            //tr[p] += (r-l+1)*v;
            return;
        }
        pushdown(p,r-l+1); //路过
        int m = mid(l,r);
        if( L<=m) 
            update(L,R,v,l,m,lp(p));
        if( R>=m+1)
            update(L,R,v,m+1,r,rp(p));
        pushup(p);
    }

    //区间查询
    T query(int L,int R,int l,int r,int p){
        if( L <=l && r<=R ) {
            return tr[p];
        }
        pushdown(p, r-l+1);
        int m = mid(l,r);
        T ret = 0;
        if( L <= m ) ret+=query(L,R,l,m,lp(p));
        if( R >=m+1) ret+=query(L,R,m+1,r,rp(p));
        //pushup(p);
        return ret;
    }
};
sgt_range<ll> sgt;
endsnippet

snippet sgt_debug "线段树Debug with dot" b
#ifdef DEBUG
template< typename Sgt>
struct Sgt_Debug {
    vector<string> v;
    char fmt[1000];
    Sgt &sgt;
    Sgt_Debug()=default;
    Sgt_Debug( Sgt & sgt):sgt(sgt){};
    int to_dot_cnt = 0;
    void to_dot (char *title = "") {
        v.clear();
        ofstream dot;
        sprintf(fmt,"%04d.dot",++to_dot_cnt);
        dot.open(fmt);
        dot << "graph g{\n node[shape=record];\n";
        dot << "label=\"id: " + to_string(to_dot_cnt)+" "+ string(title) + "\";\n";
        dfs_sgt(1,n,1);
        for (auto& e : v) {
            dot<< e;
        }
        dot<< "}" <<endl;
        dot.close();
    }
    void dfs_sgt(int l,int r,int p) {
        sprintf(fmt,"%d[label=\"%d|fx=%d|%d|%d\"];\n",p,sgt.tr[p],sgt.fx[p],l,r);
        v.push_back(string(fmt));

        if( l == r) return ;

        int m = sgt.mid(l,r);
        sprintf(fmt,"%d--%d;\n",p,sgt.lp(p));
        v.push_back(string(fmt));
        dfs_sgt(l,m,sgt.lp(p));
        sprintf(fmt,"%d--%d;\n",p,sgt.rp(p));
        v.push_back(string(fmt));
        dfs_sgt(m+1,r,sgt.rp(p));
    }
};
Sgt_Debug< decltype(sgt)> sgt_d(sgt);
#endif
endsnippet

snippet sgt_debug_2 "线段树调试_2" b
#ifdef DEBUG
    void _dfs_print(ll l,ll r,ll o,FILE *dot){
        if( o >>1) fprintf(dot,"%d--%d;\n",o>>1,o);
        fprintf(dot,"%d[label=\"%d\"]\n",o,t[o].v);
        if( l == r) return;
        ll m = (l+r)>>1;
        _dfs_print(l,m,lc(o),dot);
        _dfs_print(m+1,r,rc(o),dot);
    }
    void sgt_2_dot(ll size,string name){
        FILE *dot = fopen(name.c_str(),"w");
        fprintf(dot,"graph g {\n node[shape=circle fixedsize=true style=filled fillcolor=white colorscheme=accent8 ];\n");
        _dfs_print(1,size,1,dot);
        fprintf(dot,"}");
    }
#endif
endsnippet

snippet dsgt "动态开点线段树" b
TODO
endsnippet

snippet vsgt "权值线段树" b
TODO
endsnippet
