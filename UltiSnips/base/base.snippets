

# 转换成相应
global !p
def tranFlag(flag,inp,sep='',sepDefault=' '):
	if flag == None:
		flag = 'd'
	if sep == None: #默认用空格分隔
		sep = sepDefault
	flag = '%'+flag
	
	return (len(inp.split())-1)*(flag+sep) + flag
endglobal

global !p
def tranSeq(inp,sep=''):
	a = inp.split()
	return sep+(','+sep).join(a)
endglobal

global !p
def tranSeq2(inp,sep=''):
	a = inp.split()
	temp= sep+','
	return temp.join(a)+sep
endglobal

global !p
def tranSeq3(inp,sep=''):
	a = inp.split()
	return sep.join(a)
endglobal







### =======  调试相关 =======

snippet DD "#define DEBUG" b
#define DEBUG
${0}
endsnippet

snippet dd "debug" b
#define debug(...) fprintf(stderr, __VA_ARGS__)
endsnippet

snippet debug "#ifdef DEBUG" b
#ifdef DEBUG
	${0}
#endif
endsnippet

# printf
# d[flag] [t1] [t1] [t3] [blank]
snippet "d(\w+)? ((\S+ )*\S+)( )?" "debug printf" br
debug("${1:`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4))`}${2:\n}",`!p snip.rv=tranSeq(match.group(2))`);
endsnippet

# debug_info
# D[flag] [t1] [t1] [t3] [blank]
snippet "D(\w+)? ((\S+ )*\S+)( )?" "debug printf" br
debug_info("${1:`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4))`}${2:\n}",`!p snip.rv=tranSeq(match.group(2))`);
endsnippet

