

# 转换成相应
global !p
def tranFlag(flag,inp,sep='',sepDefault=' '):
	if flag == None:
		flag = 'd'
	if sep == None: #默认用空格分隔
		sep = sepDefault
	flag = '%'+flag
	
	return (len(inp.split())-1)*(flag+sep) + flag
endglobal

global !p
def tranSeq(inp,sep=''):
	a = inp.split()
	return sep+(','+sep).join(a)
endglobal

global !p
def tranSeq2(inp,sep=''):
	a = inp.split()
	temp= sep+','
	return temp.join(a)+sep
endglobal

global !p
def tranSeq3(inp,sep=''):
	a = inp.split()
	return sep.join(a)
endglobal


snippet pr "printf\n" b
printf("${0:some string}");
endsnippet

snippet pn "换行 printf\n" b
printf("${0:some string}\n");
endsnippet

snippet prn "换行 printf\n" b
printf("\n");
endsnippet


# printf
# pr[flag] [t1] [t1] [t3] [blank or ,]
snippet "pr(\w+)? (([^,\s]+ )*[^,\s]+)([ ,])?" "printf" br
printf("`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4))`",`!p snip.rv=tranSeq(match.group(2))`);
endsnippet

#======================
# printf with newline
# pn[flag] [t1] [t1] [t3] [blank or ,]
#======================
snippet "pn(\w+)? (([^,\s]+ )*[^,\s]+)([ ,])?" "printf" br
printf("`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4))`\n",`!p snip.rv=tranSeq(match.group(2))`);
endsnippet


#======================
# scanf
#======================
snippet sc "scanf" b
scanf("${1:foo}",${2:bar})
endsnippet

# sc[flag] t1 t2 t3
snippet "sc(\w+)? ((\S+ )*\S+)( )?" "scanf" ir
scanf("`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4),'')`",`!p snip.rv=tranSeq(match.group(2),'' if match.group(1)=='s' else '&')`);
endsnippet


#======================
# cin cout
#======================

snippet "ci ((\S+ )*\S+)( )?" "cin" ir
std::cin >> `!p snip.rv = tranSeq3(match.group(1)," >> ")`;
endsnippet

snippet co "cout" b
std::cout << $0 ;
endsnippet

snippet coe "cout" b
std::cout << $0 << std::endl;
endsnippet

snippet "co ((\S+ )*\S+)( )?" "cout" ir
std::cout << `!p snip.rv = tranSeq3(match.group(1)," <<\" \"<< ")` << std::endl;
endsnippet


#======================
# funtion
#======================
snippet "F (\w+)?" "定义函数" br 
${1:int} `!p snip.rv=match.group(1)`(${2: 参数}){
	${0}
}
endsnippet



#============================================
# int 定义变量
#============================================
snippet "i ((\w+ )*\w+)" "int 定义" br
int `!p snip.rv=tranSeq(match.group(1))`;
endsnippet

# int 定义变量,初始化 i0 a b c => int a=0,b=0,c=0;
snippet "i(\d+) ((\w+ )*\w+)" "int 定义,初始化" br
int `!p snip.rv=tranSeq2(match.group(2),'='+match.group(1))`;
endsnippet

snippet "ii ((\w+ )*\w+)" "int a,int b" ir
int `!p snip.rv=tranSeq3(match.group(1),',int ')`
endsnippet


# memset
snippet "mem (\S+) (\S+)" "memset a 0" br
memset(${1:`!p snip.rv=match.group(1)`},`!p snip.rv=match.group(2)`,sizeof($1));
endsnippet



snippet maxn "maxn" b
const int max${1:n} = 1e${2:5}+5;
endsnippet

snippet double_max "double max" b
/*
* 最大值: 
*   - 0x7f
*   - 0x42
*   - 0x43
* 最小值:
*   - 0xfe
*   - 0xc2
*/
endsnippet

snippet st "struct" b 
struct ${1:node} {
	$0
};
endsnippet



### =======  调试相关 =======

snippet DD "#define DEBUG" b
#define DEBUG
${0}
endsnippet

snippet dd "debug" b
#define debug(...) fprintf(stderr, __VA_ARGS__)
endsnippet

snippet debug "#ifdef DEBUG" b
#ifdef DEBUG
	${0}
#endif
endsnippet

# printf
# d[flag] [t1] [t1] [t3] [blank]
snippet "d(\w+)? ((\S+ )*\S+)( )?" "debug printf" br
debug("${1:`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4))`}${2:\n}",`!p snip.rv=tranSeq(match.group(2))`);
endsnippet

# debug_info
# D[flag] [t1] [t1] [t3] [blank]
snippet "D(\w+)? ((\S+ )*\S+)( )?" "debug printf" br
debug_info("${1:`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4))`}${2:\n}",`!p snip.rv=tranSeq(match.group(2))`);
endsnippet

