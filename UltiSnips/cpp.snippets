snippet author_info "作者信息" i
/*-----------------
* author: Rainboy
* email: rainboylvx@qq.com
* time: `date`
*----------------*/
endsnippet

#=================================
# 全局工具函数
#=================================

# 转换成相应
global !p
def tranFlag(flag,inp,sep='',sepDefault=' '):
	if flag == None:
		flag = 'd'
	if sep == None: #默认用空格分隔
		sep = sepDefault
	flag = '%'+flag
	return (len(inp.split())-1)*(flag+sep) + flag
endglobal

global !p
def tranSeq(inp,sep=''):
	a = inp.split()
	return sep+(','+sep).join(a)
endglobal

global !p
def tranSeq2(inp,sep=''):
	a = inp.split()
	temp= sep+','
	return temp.join(a)+sep
endglobal

global !p
def tranSeq3(inp,sep=''):
	a = inp.split()
	return sep.join(a)
endglobal


global !p
def forArgument(args,useInt=True,Reverse=False):
	[name,start,end] = args
	a = name if name !='' else 'i'
	b = start if not Reverse else end
	c = end if not Reverse else start
	d = '++' + a
	if Reverse:
		d = '--' + a
	compare_flag = '<=' if d[0] =='+' else '>='
	useInt = "int " if useInt else ""
	return "{useint}{i}={start};{i}{compare_flag}{end};{inc}".format(useint=useInt,i=a,start=b,end=c,inc=d,compare_flag=compare_flag)
endglobal

global !p
def shorForArugments(args,FOR=True):
	[name,start,end] = args
	name  = name if name !='' else 'i'
	start = start if start != '' else '1' if FOR else 'n'
	end   = end if end != '' else 'n' if FOR else '1'
	return "{name},{start},{end}".format(name=name,start=start,end=end)
endglobal

#=================================
# 全局工具函数 END
#=================================

snippet // "行内注释" b
/**
 * ${0}
 */
endsnippet

snippet ma "main()" b
int main(){
    ${0}
    return 0;
}
endsnippet


#freopen
snippet fre "freopen" b
freopen("${1:filename}.in","r",stdin);
freopen("$1.out","w",stdout);

$0

fclose(stdin);
fclose(stdout);
endsnippet


# return
snippet "re (\S+)" "return" br
return `!p snip.rv=match.group(1)`;
endsnippet

#return;
snippet re "return;" b
return;
endsnippet

#return 0;
snippet re0 "return;" b
return 0;
endsnippet


snippet us "标准命名空间" b
using namespace ${1:std};
endsnippet

snippet in "#include" b
#include <${1:iostream>}
endsnippet

snippet ins "#include" b
#include <bits/stdc++.h>
$0
endsnippet

#=================================
# 控制语句
#=================================
# if,
# li line if

# ei else if{}
# lei line else if 

# el esle {}
# le line else 

# ie if {} else {}


snippet if
if( ${1:/* condition */} ) {
    ${2}
}
endsnippet

snippet li "line if" b
if( ${1:/* condition */} ) $0
endsnippet

snippet ei
else if ( ${1:/* condition */} ) {
    $0
}
endsnippet

snippet lei "line else if" b
else if( ${1:condition} ) $0
endsnippet

snippet el "else" b
else {
    ${1:TODO}
}
endsnippet

snippet le "line else" b
else $0;
endsnippet

snippet ie "if {} else {}" b
if ( ${1:condition} ) {
	$2
}
else {
	$3
}
endsnippet

#=================================
# 控制语句 END
#=================================


# switch
snippet sw "switch" b
switch( ${1:something} ){
    case ${2:c}:
		${3:TODO}
        break;
    defaul:
        break;
}
endsnippet

# typedef 
snippet tf "typedef" b
typedef ${1:typename} ${2:alias};
endsnippet

# typename
snippet tn "typename" i
typename ${1:name}
endsnippet

# template<>
snippet tem "template<>" b
template<typename T,${1:typename ${2:name}}>
endsnippet

#=================================
# class and namespace
#=================================

snippet cla "class" b
class ${1:name} {
	$0
};
endsnippet

snippet pub "public:" b
public:
	$0
endsnippet

snippet pri "private:" b
private:
	$0
endsnippet

snippet pro "protect:" b
protect:
	$0
endsnippet

snippet try "try catch" b
try {
	$0
}
catch(std::exception & e){
    std::cerr << " Exception : " << e.what() << "\n";
}
endsnippet

snippet name "namespace" b
namespace ${1:name} {
	$0
} // end namespace $1
endsnippet

#=================================
# class and namespace END
#=================================


#=================================
# 输入输出语句
#=================================

snippet pr "printf\n" b
printf("${0:some string}");
endsnippet

snippet pn "换行 printf\n" b
printf("${0:some string}\n");
endsnippet

snippet prn "换行 printf\n" b
printf("\n");
endsnippet

# printf
# pr[flag] [t1] [t1] [t3] [blank or ,]
snippet "pr(\w+)? (([^,\s]+ )*[^,\s]+)([ ,])?" "printf" br
printf("`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4))`",`!p snip.rv=tranSeq(match.group(2))`);
endsnippet

#======================
# printf with newline
# pn[flag] [t1] [t1] [t3] [blank or ,]
#======================
snippet "pn(\w+)? (([^,\s]+ )*[^,\s]+)([ ,])?" "printf" br
printf("`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4))`\n",`!p snip.rv=tranSeq(match.group(2))`);
endsnippet

#--> scanf <--

snippet sc "scanf" b
scanf("${1:foo}",${2:bar})
endsnippet

# sc[flag] t1 t2 t3
snippet "sc(\w+)? ((\S+ )*\S+)( )?" "scanf" ir
scanf("`!p snip.rv=tranFlag(match.group(1),match.group(2),match.group(4),'')`",`!p snip.rv=tranSeq(match.group(2),'' if match.group(1)=='s' else '&')`);
endsnippet


#--> cin cout <--

snippet "ci ((\S+ )*\S+)( )?" "cin" ir
std::cin >> `!p snip.rv = tranSeq3(match.group(1)," >> ")`;
endsnippet

snippet co "cout" b
std::cout << $0 ;
endsnippet

snippet coe "cout" b
std::cout << $0 << "\n";
endsnippet

snippet "co ((\S+ )*\S+)( )?" "cout" ir
std::cout << `!p snip.rv = tranSeq3(match.group(1)," <<\" \"<< ")` << std::endl;
endsnippet

#=================================
# 输入输出语句 END
#=================================


#=================================
# 定义变量与函数
#=================================

#--> funtion <--
snippet "F (\w+)?" "定义函数" br 
${1:int} `!p snip.rv=match.group(1)`(${2: 参数}){
	${0}
}
endsnippet
#-->函数参数
snippet "ii ((\w+ )*\w+)" "int a,int b" ir
int `!p snip.rv=tranSeq3(match.group(1),',int ')`
endsnippet

#--> int <--

snippet "i ((\w+ )*\w+)" "int 定义" br
int `!p snip.rv=tranSeq(match.group(1))`;
endsnippet

# int 定义变量,初始化 i0 a b c => int a=0,b=0,c=0;
snippet "i(\d+) ((\w+ )*\w+)" "int 定义,初始化" br
int `!p snip.rv=tranSeq2(match.group(2),'='+match.group(1))`;
endsnippet

#--> memset <--
snippet "mem (\S+) (\S+)" "memset a 0" br
memset(${1:`!p snip.rv=match.group(1)`},`!p snip.rv=match.group(2)`,sizeof($1));
endsnippet

snippet maxn "maxn" b
const int max${1:n} = 1e${2:5}+5;
endsnippet

snippet double_max "double max" b
/*
* 最大值: 
*   - 0x7f
*   - 0x42
*   - 0x43
* 最小值:
*   - 0xfe
*   - 0xc2
*/
endsnippet

snippet st "struct" b 
struct ${1:node} {
	$0
};
endsnippet

#=================================
# 定义变量与函数 END
#=================================


#=================================
# 循环
#=================================

# wh while
# lw line while
# do do while

# While Loop
snippet wh
while ( ${1:/* condition */} ) {
    $0
}
endsnippet

#line While Loop
snippet lw "line while loop" b
while( ${1:condition} ) $0;
endsnippet

# Do While Loop
snippet dw
do {
    ${2}
} while ( ${1:/* condition */} );
endsnippet


# 
# 有关for的 snip
# [I][r][l]f		-> for([int] i=1; i<=n; ++i)
# [I][r][l]f N		-> for([int] i=1; i<=N; ++i)
# [I][r][l]f S N	-> for([int] i=S; i<=N; ++i)
# [I][r][l]fj s n	-> for([int] j=s; i<=N; ++j)
#
# l oneline
# i use int
# r reverse


#============================ fi 1 n

# define for i,1,n
snippet "(I?)(r?)(?<!l)f(\S+) +(\S+) +(\S+) *" "for i,1,n" br
for(`!p snip.rv=forArgument([match.group(3),match.group(4),match.group(5)],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`){
	$0
}
endsnippet
# define LineFor i,1,n
snippet "(I?)(r?)lf(\S+) +(\S+) +(\S+) *" "LineFor i,1,n" br
for(`!p snip.rv=forArgument([match.group(3),match.group(4),match.group(5)],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`) $0
endsnippet

#============================ f 1 n

# define for i,1,n
snippet "(I?)(r?)(?<!l)f (\S+) +(\S+) *" "for i,1,n" br
for(`!p snip.rv=forArgument(['i',match.group(3),match.group(4)],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`){
	$0
}
endsnippet
# define Linefor i,1,n
snippet "(I?)(r?)lf (\S+) +(\S+) *" "for i,1,n" br
for(`!p snip.rv=forArgument(['i',match.group(3),match.group(4)],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`) $0
endsnippet


#============================ fi n

# define for i,[1],n
snippet "(I?)(r?)(?<!l)f(\S+) +(\S+) *" "for i,[1],n" br
for(`!p snip.rv=forArgument([match.group(3),'1',match.group(4)],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`){
	$0
}
endsnippet
# define LineFor i,[1],n
snippet "(I?)(r?)lf(\S+) +(\S+) *" "for i,[1],n" br
for(`!p snip.rv=forArgument([match.group(3),'1',match.group(4)],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`) $0
endsnippet


#============================ fi 

# define for i,[1],[n]
snippet "(I?)(r?)(?<!l)f(\S+) *" "for i,[1],[n]" br
for(`!p snip.rv=forArgument([match.group(3),'1','n'],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`){
	$0
}
endsnippet
# define LineFor i,[1],[n]
snippet "(I?)(r?)lf(\S+) *" "LineFor i,[1],[n]" br
for(`!p snip.rv=forArgument([match.group(3),'1','n'],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`) $0
endsnippet



#============================ f n

# define for [i],[1],n
snippet "(I?)(r?)(?<!l)f +(\S+) *" "for [i],[1],n" br
for(`!p snip.rv=forArgument(['i','1',match.group(3)],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`){
	$0
}
endsnippet
# define LineFor [i],[1],n
snippet "(I?)(r?)lf +(\S+) *" "for" br
for(`!p snip.rv=forArgument(['i','1',match.group(3)],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`) $0
endsnippet

#============================ f

# define for [i],[1],[n]
snippet "(I?)(r?)(?<!l)f *" "for(i=1;i<=n;i++) or Reverse" br
for(`!p snip.rv=forArgument(['i','1','n'],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`){
	$0
}
endsnippet
# define LineFor [i],[1],[n]
snippet "(I?)(r?)lf *" "for(i=1;i<=n;i++) or Reverse In One Line" br
for(`!p snip.rv=forArgument(['i','1','n'],useInt=bool(not match.group(1)),Reverse=bool(match.group(2)))`) $0
endsnippet


# 通过迭代器遍历容器（可读写）
#snippet for
#for (auto ${2:iter} = ${1:c}.begin(); ${3:$2} != $1.end(); ${4:++iter}) {
#    ${5:TODO}
#}
#endsnippet
# 通过迭代器遍历容器（只读）
snippet cfor
for (auto ${2:citer} = ${1:c}.cbegin(); ${3:$2} != $1.cend(); ${4:++citer}) {
    ${5:TODO}
}
endsnippet
# 通过下标遍历容器
snippet For
for (decltype($1.size()) ${2:i} = 0; $2 != ${1}.size(); ${3:++}$2) {
    ${4:TODO}
}
endsnippet

# C++11风格for循环遍历（可读写）
snippet F
for (auto& e : ${1:c}) {
}
endsnippet
# C++11风格for循环遍历（只读）
snippet CF
for (const auto& e : ${1:c}) {
}
endsnippet
# For Loop
snippet FOR
for (unsigned ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
    ${4:TODO}
}
endsnippet

#=================================
# 循环 END
#=================================

#=================================
# 模板
#=================================
extends cpp_template.snippets
