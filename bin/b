#!/bin/env python3
# 作用
# 展示输入文件INPUT 的内容 并输出 程序1 说程序2 的运行结果

import argparse
import os
import sys

parser = argparse.ArgumentParser(description="展示,对比")
parser.add_argument("file_name",help="编译的代码文件名",nargs="?")
parser.add_argument("-o","--output",help="编译输出的程序名")
parser.add_argument("-i","--in",help="输入的文件名",default="in")
parser.add_argument("-c","--clang",help="使用clang",action='store_true')
parser.add_argument("--not_in",help="不自动读取in",action='store_true')
parser.add_argument("-v","--verbose",help="显示详细信息",action='store_true')
ARGS = vars(parser.parse_args())

def verbose(*args,**kwargs):
    if ARGS["verbose"]:
        print(*args,**kwargs,end="",file=sys.stderr)

compile_tool = "g++" # 编译工具

if ARGS['clang']:
    compile_tool = "clang++"

#print(ARGS)
# 没有指定文件名
if not ARGS["file_name"]:
    verbose("没有指定代码名,当前目录下的源代码为: ")
    cpplist = sorted(list(filter(lambda x: x.endswith(".cpp"),os.listdir())))
    if len(cpplist) == 0:
        verbose("空,退出\n")
        sys.exit(1)
    verbose("  ".join(cpplist)+"\n")
    ARGS["file_name"] = cpplist[0]

# 没有指定编译输出
if not ARGS["output"]:
    ARGS["output"] = os.path.splitext(ARGS["file_name"])[0] + ".out"

verbose("编译的代码 %s\n" % ARGS["file_name"])
verbose("编译为: %s\n" % ARGS["output"])
if not ARGS["verbose"]:
    print("[{file_name}] ====> [{output}]".format(**ARGS),file=sys.stderr)


# compile_args = ["g++","-std=c++20","-DDEBUG","-DLOCAL","-include","/home/rainboy/mycode/noi_tools/cpp_tools.h","-g","-o","{output}","{file_name}"]
# __cplusplus = os.popen("g++ -x c++ -E -dM -< /dev/null |grep __cplusplus").read()
# cppVersion = "C++98"
# vers = [ ("1997","c++98"), ("2011","c++11"), ("2014","c++17"), ("2017","c++2a"), ("2020","c++20") ]
# for [ver,std] in vers:
    # if __cplusplus.find(ver) >=0:
        # cppVersion = std
        # break;

# cppVersion = "c++20"
__cppversion = os.popen("g++ --version | head -1").read().split() #split(".")
__cppversion = next( (x for x in __cppversion if "." in x),"9.0.0")
# print(__cppversion)
# __cppversion = list(map(int,__cppversion))
main_version = int(__cppversion.split(".")[0])
# print(main_version)
cppVersion = "c++17"
if main_version >= 11:
    cppVersion = "c++20"

# print(cppVersion)

# noicpputils_hpp_path = os.path.join( os.path.dirname(__file__),"../noicpputils.hpp")

include_path =os.path.abspath( os.path.join(os.path.dirname(__file__),'../include') )

compile_args = [compile_tool,"-std="+cppVersion,"-DDEBUG","-DLOCAL",
                "-I",include_path,
        "-g","-o","{output}","{file_name}"]

verbose("编译参数为:\n")
verbose(" ".join(compile_args).format(**ARGS)+"\n")
sys.stderr.flush()

os.system(" ".join(compile_args).format(**ARGS))


# 检查输入数据
if ARGS["not_in"] :
    sys.exit()

if not os.path.exists(ARGS["in"]):
    print("没有找到数据文件 %s,直接执行\n" % ARGS["in"],file=sys.stderr)
    os.system("./{output} ".format(**ARGS))
else:
    print("./{output} < {in}".format(**ARGS),file=sys.stderr)
    sys.stderr.flush()
    os.system("./{output} < {in}".format(**ARGS))
